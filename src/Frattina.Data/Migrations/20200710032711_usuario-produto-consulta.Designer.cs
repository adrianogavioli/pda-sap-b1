// <auto-generated />
using System;
using Frattina.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Frattina.Data.Migrations
{
    [DbContext(typeof(FrattinaDbContext))]
    [Migration("20200710032711_usuario-produto-consulta")]
    partial class usuarioprodutoconsulta
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Frattina.Business.Models.Atendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClienteEmail")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClienteId")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ClienteIdVenda")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("ClienteNiver")
                        .HasColumnType("date");

                    b.Property<string>("ClienteNome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClienteNomeVenda")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClienteTelefone")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime");

                    b.Property<int>("EmpresaId");

                    b.Property<string>("EmpresaNome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Etapa");

                    b.Property<string>("Negociacao")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("TipoPessoa")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.Property<int>("VendedorId");

                    b.Property<string>("VendedorNome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Atendimentos");
                });

            modelBuilder.Entity("Frattina.Business.Models.AtendimentoEncerrado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AtendimentoId");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime");

                    b.Property<string>("Justificativa")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("Motivo");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId")
                        .IsUnique();

                    b.ToTable("AtendimentosEncerrados");
                });

            modelBuilder.Entity("Frattina.Business.Models.AtendimentoProduto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AtendimentoId");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Imagem")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("NivelInteresse")
                        .HasColumnType("int");

                    b.Property<string>("ProdutoSapId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("RemovidoAtendimento")
                        .HasColumnType("bit");

                    b.Property<bool>("RemovidoVenda")
                        .HasColumnType("bit");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("ValorNegociado")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("ValorTabela")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId");

                    b.ToTable("AtendimentosProdutos");
                });

            modelBuilder.Entity("Frattina.Business.Models.AtendimentoTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assunto")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("AtendimentoId");

                    b.Property<DateTime?>("DataFinalizacao")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataTarefa")
                        .HasColumnType("datetime");

                    b.Property<bool>("Removida")
                        .HasColumnType("bit");

                    b.Property<int>("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId");

                    b.ToTable("AtendimentosTarefas");
                });

            modelBuilder.Entity("Frattina.Business.Models.AtendimentoVendido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AtendimentoId");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime");

                    b.Property<int>("VendaCodigo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AtendimentoId")
                        .IsUnique();

                    b.ToTable("AtendimentosVendidos");
                });

            modelBuilder.Entity("Frattina.Business.Models.Auditoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Chave");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime");

                    b.Property<string>("Evento")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Tabela")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UsuarioId");

                    b.Property<string>("ValorAntigo")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ValorAtual")
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Auditorias");
                });

            modelBuilder.Entity("Frattina.Business.Models.Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("Frattina.Business.Models.RelUsuarioEmpresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EmpresaId");

                    b.Property<string>("EmpresaNomeFantasia")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmpresaRazaoSocial")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Removido")
                        .HasColumnType("bit");

                    b.Property<Guid>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RelUsuariosEmpresas");
                });

            modelBuilder.Entity("Frattina.Business.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CargoId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Tipo");

                    b.Property<int?>("UsuarioSapId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioSapNome")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("VendedorSapId")
                        .HasColumnType("int");

                    b.Property<string>("VendedorSapNome")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Frattina.Business.Models.UsuarioProdutoConsulta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime");

                    b.Property<string>("Imagem")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<string>("ProdutoId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuariosProdutosConsultas");
                });

            modelBuilder.Entity("Frattina.Business.Models.AtendimentoEncerrado", b =>
                {
                    b.HasOne("Frattina.Business.Models.Atendimento", "Atendimento")
                        .WithOne("Encerrado")
                        .HasForeignKey("Frattina.Business.Models.AtendimentoEncerrado", "AtendimentoId");
                });

            modelBuilder.Entity("Frattina.Business.Models.AtendimentoProduto", b =>
                {
                    b.HasOne("Frattina.Business.Models.Atendimento", "Atendimento")
                        .WithMany("Produtos")
                        .HasForeignKey("AtendimentoId");
                });

            modelBuilder.Entity("Frattina.Business.Models.AtendimentoTarefa", b =>
                {
                    b.HasOne("Frattina.Business.Models.Atendimento", "Atendimento")
                        .WithMany("Tarefas")
                        .HasForeignKey("AtendimentoId");
                });

            modelBuilder.Entity("Frattina.Business.Models.AtendimentoVendido", b =>
                {
                    b.HasOne("Frattina.Business.Models.Atendimento", "Atendimento")
                        .WithOne("Vendido")
                        .HasForeignKey("Frattina.Business.Models.AtendimentoVendido", "AtendimentoId");
                });

            modelBuilder.Entity("Frattina.Business.Models.Auditoria", b =>
                {
                    b.HasOne("Frattina.Business.Models.Usuario", "Usuario")
                        .WithMany("Auditorias")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Frattina.Business.Models.RelUsuarioEmpresa", b =>
                {
                    b.HasOne("Frattina.Business.Models.Usuario", "Usuario")
                        .WithMany("Empresas")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Frattina.Business.Models.Usuario", b =>
                {
                    b.HasOne("Frattina.Business.Models.Cargo", "Cargo")
                        .WithMany("Usuarios")
                        .HasForeignKey("CargoId");
                });

            modelBuilder.Entity("Frattina.Business.Models.UsuarioProdutoConsulta", b =>
                {
                    b.HasOne("Frattina.Business.Models.Usuario", "Usuario")
                        .WithMany("ProdutosConsultas")
                        .HasForeignKey("UsuarioId");
                });
#pragma warning restore 612, 618
        }
    }
}
